<?xml version="1.0" encoding="utf-8" ?>
<callback:api xmlns:callback="http://gkmsoft.ru/beautifulcapi" project_name="Callback">
  <namespace name="Example">
    <mapped_type name="const char*" c_type="const char*" implementation_type="const char*">
      <cpp wrap_type="const char*"/>
      <sharp wrap_type="string" wrap_2_c="{expression}" c_2_wrap="{expression}"/>
    </mapped_type>
    <mapped_type name="unsigned int" c_type="uint32_t" implementation_type="unsigned int">
      <cpp wrap_type="unsigned int"/>
      <sharp wrap_type="uint" wrap_2_c="{expression}" c_2_wrap="{expression}"/>
    </mapped_type>
    <mapped_type name="void*" c_type="void*" implementation_type="void*">
      <cpp wrap_type="void*"/>
      <sharp wrap_type="IntPtr" wrap_2_c="{expression}" c_2_wrap="{expression}"/>
    </mapped_type>

    <enumeration name="EPrintingDevice" underlying_type="int">
      <item name="printer" value="1"/>
      <item name="plotter" value="2"/>
    </enumeration>
    <class name="Printer" lifecycle="reference_counted" abstract="true" implementation_class_name="Example::IPrinter" implementation_class_header="IPrinter.h">
      <enumeration name="EQuality" underlying_type="int">
        <item name="draft"/>
        <item name="normal"/>
        <item name="high"/>
      </enumeration>
      <method name="Print" const="true">
        <argument type="const char*" name="text"/>
      </method>
      <property name="PrintingQuality" type="Example::Printer::EQuality"/>
      <method name="GetDeviceType" return="Example::EPrintingDevice" const="true"/>
      <callback lifecycle="raw_pointer_semantic" implementation_class_name="Example::PrinterBaseImpl" implementation_class_header="DefaultPrinterImpl.h"/>
    </class>
    <function name="CreateDefaultPrinter" return="Example::Printer" return_copy_or_add_ref="false" implementation_name="Example::CreateDefaultPrinterImpl" implementation_header="DefaultPrinterImpl.h">
      <argument type="Example::EPrintingDevice" name="printing_device"/>
    </function>
    <class name="Person" lifecycle="copy_semantic" implementation_class_name="Example::PersonImpl" implementation_class_header="PersonImpl.h">
      <enumeration name="ESex" underlying_type="char">
        <item name="male"/>
        <item name="female"/>
      </enumeration>
      <constructor name="Default"/>
      <method name="SetFirstName">
        <argument type="const char*" name="first_name"/>
      </method>
      <method name="GetFirstName" return="const char*" const="true"/>
      <method name="SetSecondName">
        <argument type="const char*" name="second_name"/>
      </method>
      <method name="GetSecondName" return="const char*" const="true"/>
      <method name="SetAge">
        <argument type="unsigned int" name="age"/>
      </method>
      <method name="GetAge" return="unsigned int" const="true"/>
      <method name="SetSex">
        <argument type="Example::Person::ESex" name="sex"/>
      </method>
      <method name="GetSex" return="Example::Person::ESex" const="true"/>
      <method name="Dump" const="true">
        <argument type="Example::Printer" name="printer"/>
      </method>
      <method name="Print" const="true">
        <argument type="Example::Printer" name="printer"/>
        <argument type="const char*" name="text"/>
      </method>
    </class>
  </namespace>
  <namespace name="Exception">
    <mapped_type name="const char*" c_type="const char*" implementation_type="const char*">
      <cpp wrap_type="const char*"/>
      <sharp wrap_type="string" wrap_2_c="{expression}" c_2_wrap="{expression}"/>
    </mapped_type>
    <class name="Generic" exception="true" lifecycle="copy_semantic" implementation_class_name="Exception::GenericImpl" implementation_class_header="Exception/GenericImpl.h">
      <constructor name="New"/>
      <method name="GetErrorText" return="const char*" noexcept="true" const="true"/>
    </class>
    <class name="BadArgument" base="Exception::Generic" exception="true" lifecycle="copy_semantic" implementation_class_name="Exception::BadArgumentImpl" implementation_class_header="Exception/BadArgumentImpl.h">
      <constructor name="New"/>
      <method name="GetArgumentName" return="const char*" noexcept="true" const="true"/>
    </class>
    <class name="NullArgument" base="Exception::BadArgument" exception="true" lifecycle="copy_semantic" implementation_class_name="Exception::NullArgumentImpl" implementation_class_header="Exception/NullArgumentImpl.h">
      <constructor name="New"/>
    </class>
    <class name="DivisionByZero" base="Exception::Generic" exception="true" lifecycle="copy_semantic" implementation_class_name="Exception::DivisionByZeroImpl" implementation_class_header="Exception/DivisionByZeroImpl.h">
      <constructor name="New"/>
    </class>
  </namespace>
</callback:api>
