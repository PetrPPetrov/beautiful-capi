<?xml version="1.0" encoding="utf-8" ?>
<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema" targetNamespace="http://gkmsoft.ru/beautifulcapi-params" xmlns="http://gkmsoft.ru/beautifulcapi-params">
  <xs:element name="params" type="TBeautifulCapiParams">
    <xs:annotation>
      <xs:documentation>Specifies root element for generation parameters.</xs:documentation>
    </xs:annotation>
  </xs:element>
  <xs:simpleType name="TExceptionHandlingMode">
    <xs:annotation>
      <xs:documentation>Specifies exception handling mode.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:enumeration value="no_handling">
        <xs:annotation>
          <xs:documentation>Specifies do not handle exceptions at all</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="by_first_argument">
        <xs:annotation>
          <xs:documentation>Specifies to catch all exceptions inside the C++ library and pass information about the caught exception to the clients as the first argument</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="TBeautifulCapiParams">
    <xs:annotation>
      <xs:documentation>Specifies various generation parameters.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="copyright_header" type="xs:string" minOccurs="0" maxOccurs="1">
        <xs:annotation>
          <xs:documentation>Specifies copyright header to insert in the generated wrap classes</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="automatic_generated_warning" type="xs:string" minOccurs="0" maxOccurs="1">
        <xs:annotation>
          <xs:documentation>Specifies text to insert in the generated files to inform that file was automatically generated</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="additional_include_directory" type="xs:string" minOccurs="0" maxOccurs="unbounded">
        <xs:annotation>
          <xs:documentation>Specifies additional directory to use in the search directory list</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
    <xs:attribute name="namespace_header_at_parent_folder" type="xs:boolean" use="optional" default="true">
      <xs:annotation>
        <xs:documentation>Specifies flag to generate wrapped namespace header files at parent level relative to namespace content folder</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="capi_header_suffix" type="xs:string" use="optional" default="Capi">
      <xs:annotation>
        <xs:documentation>Specifies suffix for header files which will be used for the C glue layer C function declarations</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="fwd_header_suffix" type="xs:string" use="optional" default="Fwd">
      <xs:annotation>
        <xs:documentation>Specifies suffix for header files which will be used for forward declarations of wrapper classes</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="decl_header_suffix" type="xs:string" use="optional" default="Decl">
      <xs:annotation>
        <xs:documentation>Specifies suffix for header files which will be used for declarations of wrapper classes</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="key_header_suffix" type="xs:string" use="optional" default="Keys">
      <xs:annotation>
        <xs:documentation>Specifies suffix for header files which will contain secured API keys</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="enums_header_suffix" type="xs:string" use="optional" default="Enums">
      <xs:annotation>
        <xs:documentation>Specifies suffix for header files which will contain enumeration definitions</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="template_alias_snippet_suffix" type="xs:string" use="optional" default="_Alias">
      <xs:annotation>
        <xs:documentation>Specifies suffix for snippet files which will contain template instantiation aliases.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="template_extern_snippet_suffix" type="xs:string" use="optional" default="_Extern">
      <xs:annotation>
        <xs:documentation>Specifies suffix for snippet files which will contain template instantiation externs.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="template_forwards_snippet_suffix" type="xs:string" use="optional" default="_Fwd">
      <xs:annotation>
        <xs:documentation>Specifies suffix for snippet files which will contain forward declarations for template instantiation argument types.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="template_instance_snippet_suffix" type="xs:string" use="optional" default="_Instance">
      <xs:annotation>
        <xs:documentation>Specifies suffix for snippet files which will contain template instantiations and argument types includes.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="open_api" type="xs:boolean" use="optional" default="true">
      <xs:annotation>
        <xs:documentation>Specifies flag if the library API will be open, otherwise the library API will be secured.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="copy_semantic_wrapper_class_suffix" type="xs:string" use="optional" default="">
      <xs:annotation>
        <xs:documentation>Specifies suffix for the wrapper class names which have copy semantic</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="reference_counted_wrapper_class_suffix" type="xs:string" use="optional" default="Ptr">
      <xs:annotation>
        <xs:documentation>Specifies suffix for the wrapper class names which have reference counted semantic</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="raw_pointer_wrapper_class_suffix" type="xs:string" use="optional" default="RawPtr">
      <xs:annotation>
        <xs:documentation>Specifies suffix for the wrapper class names which have raw pointer semantic</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="enable_cpp11_features_in_wrap_code" type="xs:boolean" use="optional" default="true">
      <xs:annotation>
        <xs:documentation>Specifies flag to enable C++ 11 features in the wrap side, these features will active if the client C++ compiler supports C++ 11</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="null_method_name" type="xs:string" use="optional" default="Null">
      <xs:annotation>
        <xs:documentation>Specifies Null() method name for the wrapper classes</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="is_null_method_name" type="xs:string" use="optional" default="IsNull">
      <xs:annotation>
        <xs:documentation>Specifies IsNull() method name for the wrapper classes</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="is_not_null_method_name" type="xs:string" use="optional" default="IsNotNull">
      <xs:annotation>
        <xs:documentation>Specifies IsNotNull() method name for the wrapper classes</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="detach_method_name" type="xs:string" use="optional" default="Detach">
      <xs:annotation>
        <xs:documentation>Specifies Detach() method name for the wrapper classes</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="get_raw_pointer_method_name" type="xs:string" use="optional" default="GetRawPointer">
      <xs:annotation>
        <xs:documentation>Specifies GetRawPointer() method name for the wrapper classes</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="delete_method_name" type="xs:string" use="optional" default="Delete">
      <xs:annotation>
        <xs:documentation>Specifies Delete() method name for the wrapper classes</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="exception_info_argument_name" type="xs:string" use="optional" default="exception_info">
      <xs:annotation>
        <xs:documentation>Specifies exception information argument name</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="snippet_implementation_reference_counted_usage" type="xs:string" use="optional" default="{implementation_type}*">
      <xs:annotation>
        <xs:documentation>Specifies Python3 formatting string for snippet type usage when the current class has reference counted semantic</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="snippet_implementation_raw_usage" type="xs:string" use="optional" default="{implementation_type}*">
      <xs:annotation>
        <xs:documentation>Specifies Python3 formatting string for snippet type usage when the current class has raw pointer semantic</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="snippet_implementation_value_usage" type="xs:string" use="optional" default="{implementation_type}">
      <xs:annotation>
        <xs:documentation>Specifies Python3 formatting string for snippet type usage when the current class has copy semantic</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="reference_counted_implementation_2_c" type="xs:string" use="optional" default="{expression}">
      <xs:annotation>
        <xs:documentation>Specifies default conversion from the implementation class to the C glue layer type, it should be Python3 formatting string, it is applied for classes which have reference counted semantic</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="raw_implementation_2_c" type="xs:string" use="optional" default="{expression}">
      <xs:annotation>
        <xs:documentation>Specifies default conversion from the implementation class to the C glue layer type, it should be Python3 formatting string, it is applied for classes which have raw pointer semantic</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="value_implementation_2_c" type="xs:string" use="optional" default="new {implementation_type}({expression})">
      <xs:annotation>
        <xs:documentation>Specifies default conversion from the implementation class to the C glue layer type, it should be Python3 formatting string, it is applied for classes which have copy semantic</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="warn_when_builtin_type_used" type="xs:boolean" use="optional" default="true">
      <xs:annotation>
        <xs:documentation>Specifies flag to warn when built-in type is used</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="exception_handling_mode" type="TExceptionHandlingMode" use="optional" default="no_handling">
      <xs:annotation>
        <xs:documentation>Specifies exception handling mode</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="check_and_throw_exception_filename" type="xs:string" use="optional" default="{project_name}/common/check_and_throw_exception.h">
      <xs:annotation>
        <xs:documentation>Specifies output file name which will contain the wrap side rethrowing exception code</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="beautiful_capi_namespace" type="xs:string" use="optional" default="beautiful_capi_{project_name}">
      <xs:annotation>
        <xs:documentation>Specifies service namespace name for the wrap side Beautiful Capi generated helper code, such as exception rethrowing</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="autogen_prefix_for_internal_implementation" type="xs:string" use="optional" default="AutoGen_Internal_{project_name}_">
      <xs:annotation>
        <xs:documentation>Specifies prefix for Beautiful Capi generated callback implementations and other classes which will be used inside the C++ library</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="root_header" type="xs:string" use="optional" default="">
      <xs:annotation>
        <xs:documentation>Specifies the wrap side root header file name</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="root_header_namespace" type="xs:string" use="optional" default="">
      <xs:annotation>
        <xs:documentation>Specifies the wrap side root header namespace name</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="root_header_initializer" type="xs:string" use="optional" default="">
      <xs:annotation>
        <xs:documentation>Specifies the wrap side root header namespace name</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="shared_library_name" type="xs:string" use="optional" default="">
      <xs:annotation>
        <xs:documentation>Specifies library(.dll on Windows or .so on Linux) name</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="natvis_file" type="xs:string" use="optional" default="">
      <xs:annotation>
        <xs:documentation>Enable generation and specifies path to .natvis file, which is necessary for displaying real class fields when debugging on Visual Studio(You need to manually add it for your project). Also your dll name should not contain '-' symbol!</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="doxygen_class_pattern" type="xs:string" use="optional">
      <xs:annotation>
        <xs:documentation>Specifies pattern string for class doxygen documentation</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="output_folder" type="xs:string" use="optional" default="">
      <xs:annotation>
        <xs:documentation>For internal use only, specifies output folder for generation wrap classes</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="output_wrap_file_name" type="xs:string" use="optional" default="">
      <xs:annotation>
        <xs:documentation>For internal use only, specifies output file name for generation the C glue layer C function bodies</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="internal_snippets_folder" type="xs:string" use="optional" default="">
      <xs:annotation>
        <xs:documentation>For internal use only, specifies output folder for snippets</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="api_keys_folder" type="xs:string" use="optional" default="">
      <xs:annotation>
        <xs:documentation>For internal use only, specifies output folder for secured API keys</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="generate_sharp_library" type="xs:boolean" use="optional" default="true">
      <xs:annotation>
        <xs:documentation>Generate .Net Portable Class Library(PCL)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="sharp_library_name" type="xs:string" use="optional">
      <xs:annotation>
        <xs:documentation>C# library name for CMake</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="wrap_file_line_limit" type="xs:integer" default="64000">
      <xs:annotation>
        <xs:documentation>Splits the output output file after exceeding the limit.
          This is often useful for debugging in a Visual Studio, which not correctly displayed values, located more than 65536 lines </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="single_file_wrap" type="xs:boolean" use="optional" default="false">
      <xs:annotation>
        <xs:documentation>Specifies generate single AutoGenWrap.cpp file in open_api mode instead of splitting</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
</xs:schema>
