#!/usr/bin/env python
#
# Beautiful Capi generates beautiful C API wrappers for your C++ classes
# Copyright (C) 2015 Petr Petrovich Petrov
#
# This file is part of Beautiful Capi.
#
# Beautiful Capi is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Beautiful Capi is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Beautiful Capi.  If not, see <http://www.gnu.org/licenses/>.
#


#
# WARNING: This file was automatically generated by Xsd2Python3.py program!
# Do not edit this file! Please edit the source XSD schema.
#


from enum import Enum


def string_to_bool(string_value):
    return string_value.lower() in ['true', 'on', 'yes', '1']


def string_to_int(string_value):
    return int(string_value)


class TExceptionHandlingMode(Enum):
    no_handling = 0
    by_first_argument = 1

    @staticmethod
    def load(value):
        if value == "no_handling":
            return TExceptionHandlingMode.no_handling
        if value == "by_first_argument":
            return TExceptionHandlingMode.by_first_argument
        raise ValueError


class TBeautifulCapiParams(object):
    def __init__(self):
        self.all_items = []
        self.namespace_header_at_parent_folder = True
        self.namespace_header_at_parent_folder_filled = False
        self.capi_header_suffix = "Capi"
        self.capi_header_suffix_filled = False
        self.fwd_header_suffix = "Fwd"
        self.fwd_header_suffix_filled = False
        self.decl_header_suffix = "Decl"
        self.decl_header_suffix_filled = False
        self.key_header_suffix = "Keys"
        self.key_header_suffix_filled = False
        self.enums_header_suffix = "Enums"
        self.enums_header_suffix_filled = False
        self.template_alias_snippet_suffix = "_Alias"
        self.template_alias_snippet_suffix_filled = False
        self.template_extern_snippet_suffix = "_Extern"
        self.template_extern_snippet_suffix_filled = False
        self.template_forwards_snippet_suffix = "_Fwd"
        self.template_forwards_snippet_suffix_filled = False
        self.template_instance_snippet_suffix = "_Instance"
        self.template_instance_snippet_suffix_filled = False
        self.open_api = True
        self.open_api_filled = False
        self.copy_semantic_wrapper_class_suffix = ""
        self.copy_semantic_wrapper_class_suffix_filled = False
        self.reference_counted_wrapper_class_suffix = "Ptr"
        self.reference_counted_wrapper_class_suffix_filled = False
        self.raw_pointer_wrapper_class_suffix = "RawPtr"
        self.raw_pointer_wrapper_class_suffix_filled = False
        self.enable_cpp11_features_in_wrap_code = True
        self.enable_cpp11_features_in_wrap_code_filled = False
        self.null_method_name = "Null"
        self.null_method_name_filled = False
        self.is_null_method_name = "IsNull"
        self.is_null_method_name_filled = False
        self.is_not_null_method_name = "IsNotNull"
        self.is_not_null_method_name_filled = False
        self.detach_method_name = "Detach"
        self.detach_method_name_filled = False
        self.get_raw_pointer_method_name = "GetRawPointer"
        self.get_raw_pointer_method_name_filled = False
        self.delete_method_name = "Delete"
        self.delete_method_name_filled = False
        self.exception_info_argument_name = "exception_info"
        self.exception_info_argument_name_filled = False
        self.snippet_implementation_reference_counted_usage = "{implementation_type}*"
        self.snippet_implementation_reference_counted_usage_filled = False
        self.snippet_implementation_raw_usage = "{implementation_type}*"
        self.snippet_implementation_raw_usage_filled = False
        self.snippet_implementation_value_usage = "{implementation_type}"
        self.snippet_implementation_value_usage_filled = False
        self.reference_counted_implementation_2_c = "{expression}"
        self.reference_counted_implementation_2_c_filled = False
        self.raw_implementation_2_c = "{expression}"
        self.raw_implementation_2_c_filled = False
        self.value_implementation_2_c = "new {implementation_type}({expression})"
        self.value_implementation_2_c_filled = False
        self.warn_when_builtin_type_used = True
        self.warn_when_builtin_type_used_filled = False
        self.exception_handling_mode = TExceptionHandlingMode.no_handling
        self.exception_handling_mode_filled = False
        self.check_and_throw_exception_filename = "{project_name}/common/check_and_throw_exception.h"
        self.check_and_throw_exception_filename_filled = False
        self.beautiful_capi_namespace = "beautiful_capi_{project_name}"
        self.beautiful_capi_namespace_filled = False
        self.autogen_prefix_for_internal_implementation = "AutoGen_Internal_{project_name}_"
        self.autogen_prefix_for_internal_implementation_filled = False
        self.root_header = ""
        self.root_header_filled = False
        self.root_header_namespace = ""
        self.root_header_namespace_filled = False
        self.root_header_initializer = ""
        self.root_header_initializer_filled = False
        self.shared_library_name = ""
        self.shared_library_name_filled = False
        self.natvis_file = ""
        self.natvis_file_filled = False
        self.doxygen_class_pattern = ""
        self.doxygen_class_pattern_filled = False
        self.output_folder = ""
        self.output_folder_filled = False
        self.output_wrap_file_name = ""
        self.output_wrap_file_name_filled = False
        self.internal_snippets_folder = ""
        self.internal_snippets_folder_filled = False
        self.api_keys_folder = ""
        self.api_keys_folder_filled = False
        self.input_keys = ""
        self.input_keys_filled = False
        self.generate_sharp_library = True
        self.generate_sharp_library_filled = False
        self.sharp_library_name = ""
        self.sharp_library_name_filled = False
        self.wrap_file_line_limit = 64000
        self.wrap_file_line_limit_filled = False
        self.single_file_wrap = False
        self.single_file_wrap_filled = False
        self.copyright_headers = []
        self.automatic_generated_warnings = []
        self.additional_include_directories = []

    def load_element(self, element):
        if element.nodeName == "copyright_header":
            new_element = ""
            for text in [text for text in element.childNodes if text.nodeType == text.TEXT_NODE]:
                new_element += text.nodeValue
            self.copyright_headers.append(new_element)
            return True
        if element.nodeName == "automatic_generated_warning":
            new_element = ""
            for text in [text for text in element.childNodes if text.nodeType == text.TEXT_NODE]:
                new_element += text.nodeValue
            self.automatic_generated_warnings.append(new_element)
            return True
        if element.nodeName == "additional_include_directory":
            new_element = ""
            for text in [text for text in element.childNodes if text.nodeType == text.TEXT_NODE]:
                new_element += text.nodeValue
            self.additional_include_directories.append(new_element)
            return True
        return False

    def load_attributes(self, dom_node):
        if dom_node.hasAttribute("namespace_header_at_parent_folder"):
            cur_attr = dom_node.getAttribute("namespace_header_at_parent_folder")
            self.namespace_header_at_parent_folder = string_to_bool(cur_attr)
            self.namespace_header_at_parent_folder_filled = True
        if dom_node.hasAttribute("capi_header_suffix"):
            cur_attr = dom_node.getAttribute("capi_header_suffix")
            self.capi_header_suffix = cur_attr
            self.capi_header_suffix_filled = True
        if dom_node.hasAttribute("fwd_header_suffix"):
            cur_attr = dom_node.getAttribute("fwd_header_suffix")
            self.fwd_header_suffix = cur_attr
            self.fwd_header_suffix_filled = True
        if dom_node.hasAttribute("decl_header_suffix"):
            cur_attr = dom_node.getAttribute("decl_header_suffix")
            self.decl_header_suffix = cur_attr
            self.decl_header_suffix_filled = True
        if dom_node.hasAttribute("key_header_suffix"):
            cur_attr = dom_node.getAttribute("key_header_suffix")
            self.key_header_suffix = cur_attr
            self.key_header_suffix_filled = True
        if dom_node.hasAttribute("enums_header_suffix"):
            cur_attr = dom_node.getAttribute("enums_header_suffix")
            self.enums_header_suffix = cur_attr
            self.enums_header_suffix_filled = True
        if dom_node.hasAttribute("template_alias_snippet_suffix"):
            cur_attr = dom_node.getAttribute("template_alias_snippet_suffix")
            self.template_alias_snippet_suffix = cur_attr
            self.template_alias_snippet_suffix_filled = True
        if dom_node.hasAttribute("template_extern_snippet_suffix"):
            cur_attr = dom_node.getAttribute("template_extern_snippet_suffix")
            self.template_extern_snippet_suffix = cur_attr
            self.template_extern_snippet_suffix_filled = True
        if dom_node.hasAttribute("template_forwards_snippet_suffix"):
            cur_attr = dom_node.getAttribute("template_forwards_snippet_suffix")
            self.template_forwards_snippet_suffix = cur_attr
            self.template_forwards_snippet_suffix_filled = True
        if dom_node.hasAttribute("template_instance_snippet_suffix"):
            cur_attr = dom_node.getAttribute("template_instance_snippet_suffix")
            self.template_instance_snippet_suffix = cur_attr
            self.template_instance_snippet_suffix_filled = True
        if dom_node.hasAttribute("open_api"):
            cur_attr = dom_node.getAttribute("open_api")
            self.open_api = string_to_bool(cur_attr)
            self.open_api_filled = True
        if dom_node.hasAttribute("copy_semantic_wrapper_class_suffix"):
            cur_attr = dom_node.getAttribute("copy_semantic_wrapper_class_suffix")
            self.copy_semantic_wrapper_class_suffix = cur_attr
            self.copy_semantic_wrapper_class_suffix_filled = True
        if dom_node.hasAttribute("reference_counted_wrapper_class_suffix"):
            cur_attr = dom_node.getAttribute("reference_counted_wrapper_class_suffix")
            self.reference_counted_wrapper_class_suffix = cur_attr
            self.reference_counted_wrapper_class_suffix_filled = True
        if dom_node.hasAttribute("raw_pointer_wrapper_class_suffix"):
            cur_attr = dom_node.getAttribute("raw_pointer_wrapper_class_suffix")
            self.raw_pointer_wrapper_class_suffix = cur_attr
            self.raw_pointer_wrapper_class_suffix_filled = True
        if dom_node.hasAttribute("enable_cpp11_features_in_wrap_code"):
            cur_attr = dom_node.getAttribute("enable_cpp11_features_in_wrap_code")
            self.enable_cpp11_features_in_wrap_code = string_to_bool(cur_attr)
            self.enable_cpp11_features_in_wrap_code_filled = True
        if dom_node.hasAttribute("null_method_name"):
            cur_attr = dom_node.getAttribute("null_method_name")
            self.null_method_name = cur_attr
            self.null_method_name_filled = True
        if dom_node.hasAttribute("is_null_method_name"):
            cur_attr = dom_node.getAttribute("is_null_method_name")
            self.is_null_method_name = cur_attr
            self.is_null_method_name_filled = True
        if dom_node.hasAttribute("is_not_null_method_name"):
            cur_attr = dom_node.getAttribute("is_not_null_method_name")
            self.is_not_null_method_name = cur_attr
            self.is_not_null_method_name_filled = True
        if dom_node.hasAttribute("detach_method_name"):
            cur_attr = dom_node.getAttribute("detach_method_name")
            self.detach_method_name = cur_attr
            self.detach_method_name_filled = True
        if dom_node.hasAttribute("get_raw_pointer_method_name"):
            cur_attr = dom_node.getAttribute("get_raw_pointer_method_name")
            self.get_raw_pointer_method_name = cur_attr
            self.get_raw_pointer_method_name_filled = True
        if dom_node.hasAttribute("delete_method_name"):
            cur_attr = dom_node.getAttribute("delete_method_name")
            self.delete_method_name = cur_attr
            self.delete_method_name_filled = True
        if dom_node.hasAttribute("exception_info_argument_name"):
            cur_attr = dom_node.getAttribute("exception_info_argument_name")
            self.exception_info_argument_name = cur_attr
            self.exception_info_argument_name_filled = True
        if dom_node.hasAttribute("snippet_implementation_reference_counted_usage"):
            cur_attr = dom_node.getAttribute("snippet_implementation_reference_counted_usage")
            self.snippet_implementation_reference_counted_usage = cur_attr
            self.snippet_implementation_reference_counted_usage_filled = True
        if dom_node.hasAttribute("snippet_implementation_raw_usage"):
            cur_attr = dom_node.getAttribute("snippet_implementation_raw_usage")
            self.snippet_implementation_raw_usage = cur_attr
            self.snippet_implementation_raw_usage_filled = True
        if dom_node.hasAttribute("snippet_implementation_value_usage"):
            cur_attr = dom_node.getAttribute("snippet_implementation_value_usage")
            self.snippet_implementation_value_usage = cur_attr
            self.snippet_implementation_value_usage_filled = True
        if dom_node.hasAttribute("reference_counted_implementation_2_c"):
            cur_attr = dom_node.getAttribute("reference_counted_implementation_2_c")
            self.reference_counted_implementation_2_c = cur_attr
            self.reference_counted_implementation_2_c_filled = True
        if dom_node.hasAttribute("raw_implementation_2_c"):
            cur_attr = dom_node.getAttribute("raw_implementation_2_c")
            self.raw_implementation_2_c = cur_attr
            self.raw_implementation_2_c_filled = True
        if dom_node.hasAttribute("value_implementation_2_c"):
            cur_attr = dom_node.getAttribute("value_implementation_2_c")
            self.value_implementation_2_c = cur_attr
            self.value_implementation_2_c_filled = True
        if dom_node.hasAttribute("warn_when_builtin_type_used"):
            cur_attr = dom_node.getAttribute("warn_when_builtin_type_used")
            self.warn_when_builtin_type_used = string_to_bool(cur_attr)
            self.warn_when_builtin_type_used_filled = True
        if dom_node.hasAttribute("exception_handling_mode"):
            cur_attr = dom_node.getAttribute("exception_handling_mode")
            self.exception_handling_mode = TExceptionHandlingMode.load(cur_attr)
            self.exception_handling_mode_filled = True
        if dom_node.hasAttribute("check_and_throw_exception_filename"):
            cur_attr = dom_node.getAttribute("check_and_throw_exception_filename")
            self.check_and_throw_exception_filename = cur_attr
            self.check_and_throw_exception_filename_filled = True
        if dom_node.hasAttribute("beautiful_capi_namespace"):
            cur_attr = dom_node.getAttribute("beautiful_capi_namespace")
            self.beautiful_capi_namespace = cur_attr
            self.beautiful_capi_namespace_filled = True
        if dom_node.hasAttribute("autogen_prefix_for_internal_implementation"):
            cur_attr = dom_node.getAttribute("autogen_prefix_for_internal_implementation")
            self.autogen_prefix_for_internal_implementation = cur_attr
            self.autogen_prefix_for_internal_implementation_filled = True
        if dom_node.hasAttribute("root_header"):
            cur_attr = dom_node.getAttribute("root_header")
            self.root_header = cur_attr
            self.root_header_filled = True
        if dom_node.hasAttribute("root_header_namespace"):
            cur_attr = dom_node.getAttribute("root_header_namespace")
            self.root_header_namespace = cur_attr
            self.root_header_namespace_filled = True
        if dom_node.hasAttribute("root_header_initializer"):
            cur_attr = dom_node.getAttribute("root_header_initializer")
            self.root_header_initializer = cur_attr
            self.root_header_initializer_filled = True
        if dom_node.hasAttribute("shared_library_name"):
            cur_attr = dom_node.getAttribute("shared_library_name")
            self.shared_library_name = cur_attr
            self.shared_library_name_filled = True
        if dom_node.hasAttribute("natvis_file"):
            cur_attr = dom_node.getAttribute("natvis_file")
            self.natvis_file = cur_attr
            self.natvis_file_filled = True
        if dom_node.hasAttribute("doxygen_class_pattern"):
            cur_attr = dom_node.getAttribute("doxygen_class_pattern")
            self.doxygen_class_pattern = cur_attr
            self.doxygen_class_pattern_filled = True
        if dom_node.hasAttribute("output_folder"):
            cur_attr = dom_node.getAttribute("output_folder")
            self.output_folder = cur_attr
            self.output_folder_filled = True
        if dom_node.hasAttribute("output_wrap_file_name"):
            cur_attr = dom_node.getAttribute("output_wrap_file_name")
            self.output_wrap_file_name = cur_attr
            self.output_wrap_file_name_filled = True
        if dom_node.hasAttribute("internal_snippets_folder"):
            cur_attr = dom_node.getAttribute("internal_snippets_folder")
            self.internal_snippets_folder = cur_attr
            self.internal_snippets_folder_filled = True
        if dom_node.hasAttribute("api_keys_folder"):
            cur_attr = dom_node.getAttribute("api_keys_folder")
            self.api_keys_folder = cur_attr
            self.api_keys_folder_filled = True
        if dom_node.hasAttribute("input_keys"):
            cur_attr = dom_node.getAttribute("input_keys")
            self.input_keys = cur_attr
            self.input_keys_filled = True
        if dom_node.hasAttribute("generate_sharp_library"):
            cur_attr = dom_node.getAttribute("generate_sharp_library")
            self.generate_sharp_library = string_to_bool(cur_attr)
            self.generate_sharp_library_filled = True
        if dom_node.hasAttribute("sharp_library_name"):
            cur_attr = dom_node.getAttribute("sharp_library_name")
            self.sharp_library_name = cur_attr
            self.sharp_library_name_filled = True
        if dom_node.hasAttribute("wrap_file_line_limit"):
            cur_attr = dom_node.getAttribute("wrap_file_line_limit")
            self.wrap_file_line_limit = string_to_int(cur_attr)
            self.wrap_file_line_limit_filled = True
        if dom_node.hasAttribute("single_file_wrap"):
            cur_attr = dom_node.getAttribute("single_file_wrap")
            self.single_file_wrap = string_to_bool(cur_attr)
            self.single_file_wrap_filled = True

    def load(self, dom_node):
        for element in dom_node.childNodes:
            self.load_element(element)
        self.load_attributes(dom_node)


def load(dom_node):
    for root_element in [root for root in dom_node.childNodes if root.localName == "params"]:
        root_params = TBeautifulCapiParams()
        root_params.load(root_element)
        return root_params
